// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package queries

import (
	"context"
)

const deleteDevice = `-- name: DeleteDevice :exec
DELETE FROM devices WHERE id = $1
`

func (q *Queries) DeleteDevice(ctx context.Context, db DBTX, id int32) error {
	_, err := db.Exec(ctx, deleteDevice, id)
	return err
}

const getDevice = `-- name: GetDevice :one
SELECT id, name, brand, state, creation_time FROM devices WHERE id = $1
`

func (q *Queries) GetDevice(ctx context.Context, db DBTX, id int32) (*Device, error) {
	row := db.QueryRow(ctx, getDevice, id)
	var i Device
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Brand,
		&i.State,
		&i.CreationTime,
	)
	return &i, err
}

const insertDevice = `-- name: InsertDevice :exec
INSERT INTO devices (name, brand) VALUES ($1, $2)
`

type InsertDeviceParams struct {
	Name  string `db:"name" json:"name,omitempty"`
	Brand string `db:"brand" json:"brand,omitempty"`
}

func (q *Queries) InsertDevice(ctx context.Context, db DBTX, arg *InsertDeviceParams) error {
	_, err := db.Exec(ctx, insertDevice, arg.Name, arg.Brand)
	return err
}

const listDevices = `-- name: ListDevices :many
SELECT 
  id, name, brand, state, creation_time
FROM 
  devices
WHERE
  (brand = $1 OR $1 = '') AND
  (state = $2 OR $2 = '') AND
  (name = $3 OR $3 = '')
LIMIT 1000
`

type ListDevicesParams struct {
	Brand string `db:"brand" json:"brand,omitempty"`
	State string `db:"state" json:"state,omitempty"`
	Name  string `db:"name" json:"name,omitempty"`
}

func (q *Queries) ListDevices(ctx context.Context, db DBTX, arg *ListDevicesParams) ([]*Device, error) {
	rows, err := db.Query(ctx, listDevices, arg.Brand, arg.State, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Device
	for rows.Next() {
		var i Device
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Brand,
			&i.State,
			&i.CreationTime,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDevice = `-- name: UpdateDevice :exec
UPDATE devices SET name = $2, brand = $3, state = $4 WHERE id = $1
`

type UpdateDeviceParams struct {
	ID    int32  `db:"id" json:"id"`
	Name  string `db:"name" json:"name,omitempty"`
	Brand string `db:"brand" json:"brand,omitempty"`
	State string `db:"state" json:"state,omitempty"`
}

func (q *Queries) UpdateDevice(ctx context.Context, db DBTX, arg *UpdateDeviceParams) error {
	_, err := db.Exec(ctx, updateDevice,
		arg.ID,
		arg.Name,
		arg.Brand,
		arg.State,
	)
	return err
}
